# Generated by Django 3.2.15 on 2024-03-14 19:49

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import medtour.users.managers
import sorl.thumbnail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_organization', models.BooleanField(default=False, verbose_name='Организация ли?')),
                ('avatar', sorl.thumbnail.fields.ImageField(blank=True, null=True, upload_to='avatars/%y/%m/%d', verbose_name='Аватар профиля')),
                ('pick', models.CharField(choices=[('resort', 'Resort'), ('guide', 'Guide'), ('client', 'Client')], default='client', max_length=20, verbose_name='Выбор типа')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '1. Основной аккаунт для аутентификации',
                'verbose_name_plural': '1. Все аккаунты для аутентификации',
                'ordering': ('-date_joined',),
            },
            managers=[
                ('objects', medtour.users.managers.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100)),
            ],
            options={
                'verbose_name': 'Страна',
                'verbose_name_plural': 'Государства',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='OrganizationCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('slug', models.SlugField(blank=True, max_length=255, verbose_name='Слаг')),
                ('photo', models.ImageField(default='/static/images/default.svg', upload_to='banners')),
                ('icon', models.ImageField(default='/static/images/cart.svg', upload_to='category_icons')),
                ('icon_active', models.ImageField(default='/static/images/cart.svg', upload_to='category_icons')),
                ('column', models.CharField(default='two', max_length=10)),
                ('title_color', models.CharField(default='#FFFFFF', max_length=10)),
            ],
            options={
                'verbose_name': '3.1 Категория организации',
                'verbose_name_plural': '3.1 Категории организаций',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='RestoreCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, max_length=6, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Код подтверждения для восстановления',
                'verbose_name_plural': 'Коды подтверждения для восстановления',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regions', to='users.country')),
            ],
            options={
                'verbose_name': 'Область',
                'verbose_name_plural': 'Области',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iin', models.CharField(blank=True, db_index=True, max_length=14, null=True, verbose_name='ИИН пользователя')),
                ('first_name', models.CharField(max_length=150, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('district', models.CharField(blank=True, max_length=50, null=True, verbose_name='Район')),
                ('street', models.CharField(blank=True, max_length=50, null=True, verbose_name='Улица')),
                ('home_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Номер дома')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_countries', to='users.country', verbose_name='Страна')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_regions', to='users.region', verbose_name='Регион')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='people', to=settings.AUTH_USER_MODEL, verbose_name='Основной аккаунт')),
            ],
            options={
                'verbose_name': '2. Пользователь',
                'verbose_name_plural': '2. Пользователи',
                'ordering': ('first_name', 'last_name'),
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('org_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Название организации')),
                ('bin', models.CharField(blank=True, db_index=True, max_length=12, null=True, verbose_name='БИН организации')),
                ('is_moderated', models.BooleanField(default=False, verbose_name='Проверен')),
                ('type', models.CharField(choices=[('sanatorium', 'Санаторий'), ('zonaotdyxa', 'Зона отдыха'), ('guide', 'Гиды')], default='sanatorium', max_length=15, verbose_name='Тип организации')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='organization', to=settings.AUTH_USER_MODEL, verbose_name='Основной аккаунт')),
            ],
            options={
                'verbose_name': '3. Организация',
                'verbose_name_plural': '3. Организации',
                'ordering': ('is_moderated',),
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('slug', models.SlugField(blank=True, max_length=255, verbose_name='Слаг')),
                ('is_first_page', models.BooleanField(default=False, verbose_name='Будет ли на первой странице?')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='users.region')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ActivateCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, max_length=6, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Код подтверждения для активации',
                'verbose_name_plural': 'Коды подтверждения для активации',
            },
        ),
    ]
