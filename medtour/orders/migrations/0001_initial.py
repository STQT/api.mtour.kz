# Generated by Django 3.2.15 on 2023-02-10 09:05

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sanatorium', '0001_initial'),
        ('tourpackages', '0001_initial'),
        ('tournumbers', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tours', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceCart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField(help_text='Дата начала тура', verbose_name='Дата начала тура')),
                ('end', models.DateField(help_text='Дата окончания тура', verbose_name='Дата окончания тура')),
                ('count', models.IntegerField(default=1, help_text='Количество человек', verbose_name='Количество человек')),
                ('price', models.IntegerField(default=0, help_text='Общая цена при покупке тура', verbose_name='Цена')),
                ('number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournumbers.tournumbers', verbose_name='Номер тура')),
                ('tour', models.ForeignKey(help_text='Выбранный тур пользователя', on_delete=django.db.models.deletion.CASCADE, related_name='cart', to='tours.tour')),
                ('user', models.ForeignKey(blank=True, help_text='Пользователь (нужно указать ID пользователя при регистрации', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cart', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Корзина тура',
                'verbose_name_plural': 'Корзина туров',
            },
        ),
        migrations.CreateModel(
            name='ServiceCartServices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_count_services', to='tours.tourpaidservices', verbose_name='Платная услуга корзины')),
                ('service_cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_count_services', to='orders.servicecart', verbose_name='Корзина тура')),
            ],
            options={
                'verbose_name': 'Услуга корзины тура',
                'verbose_name_plural': 'Услуги корзины тура',
            },
        ),
        migrations.CreateModel(
            name='ServiceCartPackages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_count_packages', to='tourpackages.tourpackages', verbose_name='Платная услуга корзины')),
                ('service_cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_count_packages', to='orders.servicecart', verbose_name='Корзина тура')),
            ],
            options={
                'verbose_name': 'Пакет корзины тура',
                'verbose_name_plural': 'Пакеты корзины тура',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(verbose_name='Сумма оплаты')),
                ('status', models.IntegerField(choices=[(0, 'Не оплачено'), (1, 'Оплачено')], default=0, verbose_name='Статус оплаты')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_partial', models.BooleanField(default=False, verbose_name='Частичная оплата')),
                ('amount_paid_part', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Процент частичной оплаты')),
                ('redirect_url', models.CharField(blank=True, max_length=150, null=True, verbose_name='Страница с оплатой платежной системы')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='orders.servicecart')),
                ('reservation', models.OneToOneField(help_text='Укажите бронь', on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='sanatorium.reservations')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Оплата',
                'verbose_name_plural': 'Оплаты',
            },
        ),
        migrations.CreateModel(
            name='Kassa24Credentials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login', models.CharField(max_length=255, verbose_name='Логин')),
                ('password', models.CharField(max_length=255, verbose_name='Пароль')),
                ('is_test', models.BooleanField(default=True, verbose_name='Это тест?')),
                ('tour', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='kassa24', to='tours.tour')),
            ],
            options={
                'verbose_name': 'Платежные данные касса24',
                'verbose_name_plural': 'Платежные данные касса24',
            },
        ),
    ]
